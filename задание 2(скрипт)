#Установка пакетов
import pymysql.cursors
import os
import mysql.connector
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


#Определение функции для установления соединения с базой. Поля host, user, password, db заполняются самостоятельно
def getConnection():
    connection = pymysql.connect(host='localhost',
                                 user='root',
                                 password='',                             
                                 db='orders',
                                 charset='utf8mb4',
                                 cursorclass=pymysql.cursors.DictCursor)
    return connection


#Вывод списка инструментов, по которым можно построить очередь заявок

connection = getConnection()
with connection.cursor() as cursor:
        sql = "SELECT seccode FROM security_type order by instrument_type, seccode"
        cursor.execute(sql)
        table = pd.DataFrame(cursor.fetchall())
        print(table)
connection.close()


# Присваивание переменной a значение тикера, данные по которому необходимо запросить. Список доступных тикеров можно получить, выполнив команду выше

a = input('Введите тикер  ')


# Присваивание переменной b момента времени, данные на который необходимо запросить. Момент времени должен быть записан в формате HHMMSSQQQ

b = int(input('Введите момент времени в течение торговой сессий  '))
if (b>0) and (b<235999999):
# Вывод введенных пользователем значений, для того чтобы дать ему возможность проверить правильность введенных значений
print ('Вы запросили очередь заявок по инструменту', a, 'на момент времени', b)
else:
    print ('Введенное время не соответствует требуемому формату')
    b = int(input('Введите момент времени в течение торговой сессий  '))
    print ('Вы запросили очередь заявок по инструменту', a, 'на момент времени', b)


#Для примера вывод списка из первых десяти записей, которые удовлетворяют условиям, введенным пользователем
connection = getConnection()
with connection.cursor() as cursor:
        os = "SELECT * FROM orders WHERE (seccode = '"+a+"') AND (ordertime < '"+str(b)+"') LIMIT 10"
        cursor.execute(os)
        rows = cursor.fetchall()
for row in rows:        
    print(row)
connection.close()


#Создание таблицы, в которую будут вноситься данные по состоянию стакана
quote = pd.DataFrame (columns=['id','buysell', 'price', 'volume'])
quote


#Запрос списка записей, которые удовлетворяют условиям, введенным пользователем
#НЕ РАБОТАЕТ
connection = getConnection()
with connection.cursor() as cursor:
        os = "SELECT seccode, buysell, ordertime, action, price, volume FROM orders WHERE (seccode = '"+a+"') AND (ordertime < '"+str(b)+"')"
        cursor.execute(os)
        for rec in cursor.fetchall():#движение по строкам из результата запроса в базе
    #print(rec['action'])
            if rec['action']==1: #действия для неисполненных заявок
                 for id in quote: #движение по стакану
                    if quote['price'] == rec['price']: #действия, если в стакане уже есть такой уровень цены
                        quote['volume'] += rec['volume']
                        quote['buysell'] == rec['buysell']
                    else: 
                        quote.append([rec['buysell'],rec['price'],rec['volume']]) #действия, если в стакане нет такого уровня цены
            else: #действия для отмененных или исполненных заявок
                for i in quote:
                    if quote['price'] == rec ['price']: #действия, если в стакане уже есть такой уровень цены
                        quote['volume'] -= rec['volume']
                        quote['buysell'] ==rec['buysell']
                    else:
                        quote.append([rec['buysell'],rec['price'],rec['volume']]) #действия, если в стакане нет такого уровня цены
        print(quote)
 connection.close()
