# Установка пакета pymysql

import pymysql.cursors  
import pandas as pd


# Установка подключения к базе данных. Поля host, user, password, db заполняются самостоятельно
# При успешном подключении появится  connect successful!! 

connection = pymysql.connect(host='localhost',
                             user='root',
                             password='root',                             
                             db='orders',
                             charset='utf8mb4',
                             cursorclass=pymysql.cursors.DictCursor)
print ("connect successful!!")


# Вывод списка инструментов, по которым можно построить очередь заявок

with connection.cursor() as cursor:
        sql = "SELECT seccode FROM security_type order by instrument_type, seccode"
        cursor.execute(sql)
        table = pd.DataFrame(cursor.fetchall())
        connection.close()
        print(table)


# Присвоить переменной a значение тикера, данные по которому необходимо запросить. Список доступных тикеров можно получить, выполнив команду выше

a = input('Введите тикер  ')


# Присвоить переменной b момент времени, данные на который необходимо запросить. Момент времени должен быть записан в формате HHMMSSQQQ

b = int(input('Введите момент времени в течение торговой сессий  '))
if (b>0) and (b<235999999):


# Вывести введенные пользователем значения, для того чтобы дать ему возможность проверить правильность введенных значений

print ('Вы запросили очередь заявок по инструменту', a, 'на момент времени', b)
else:
    print ('Введенное время не соответствует требуемому формату')
    b = int(input('Введите момент времени в течение торговой сессий  '))
    print ('Вы запросили очередь заявок по инструменту', a, 'на момент времени', b)


# Вывести список всех записей, которые удовлетворяют условиям, которые ввел пользователь

with connection.cursor() as cursor:
        sql = "SELECT * FROM orders where seccode = 'ALRS' and ordertime <= 100000000"
        cursor.execute(sql)
        print ("cursor.description: ", cursor.description)
        print()
        for row in cursor:
            print(row)


# Вывести список уровней цен и соответствующих им объемов

if (seccode = a) and (ordertime <= b):
    d == 0 #счетчик накопленного объема
    i == max (price) #выбор максимальной цены, от которой будет происходить отсчет
    for i in range (min(price), max(price)+0.05,0.05):
        d == 0 #счетчик накопленного объема
        if action == 1:
            d == d + volume #увеличение объема, если заявка не исполнена
        else:
            d == d - volume #уменьшение объема, если заявка отменена или исполнена
    print (i, ' ', d) #вывод списка уровней цен и соответствующих им объемов
    
    



